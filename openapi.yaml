openapi: 3.1.3
info:
  title: MedInfo Burkina API
  version: "1.0.0"
  description: >
    API REST MedInfo Burkina — gestion des dossiers médicaux (patients, médecins,
    consultations, prescriptions, lab results, audit logs, offline sync).

servers:
  - url: http://localhost:8000/api/v1
    description: Local Dev
  - url: https://medinfo.example.com/api/v1
    description: Production

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        email: { type: string }
        roles:
          type: array
          items: { type: string }
    Patient:
      type: object
      properties:
        id: { type: integer }
        national_id: { type: string }
        dob: { type: string, format: date }
        address: { type: string }
        phone: { type: string }
        user: { $ref: "#/components/schemas/User" }
    Consultation:
      type: object
      properties:
        id: { type: integer }
        patient_id: { type: integer }
        doctor_id: { type: integer }
        reason: { type: string }
        diagnosis: { type: string }
        created_at: { type: string, format: date-time }
    Prescription:
      type: object
      properties:
        id: { type: integer }
        consultation_id: { type: integer }
        medicine: { type: string }
        dosage: { type: string }
        duration: { type: string }
        notes: { type: string }
    MedicalRecord:
      type: object
      properties:
        id: { type: integer }
        patient_id: { type: integer }
        doctor_id: { type: integer }
        type: { type: string }
        description: { type: string }
        created_at: { type: string, format: date-time }
    LabResult:
      type: object
      properties:
        id: { type: integer }
        patient_id: { type: integer }
        test_name: { type: string }
        result: { type: string }
        performed_by: { type: string }
        result_date: { type: string, format: date }
    AuditLog:
      type: object
      properties:
        id: { type: integer }
        user_id: { type: integer }
        action: { type: string }
        details: { type: object }
        created_at: { type: string, format: date-time }

paths:
  /auth/login:
    post:
      summary: Authentification utilisateur
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string, format: password }
      responses:
        "200":
          description: Connexion réussie
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
                  user: { $ref: "#/components/schemas/User" }
        "401": { description: Identifiants invalides }

  /auth/register:
    post:
      summary: Inscription d’un nouvel utilisateur
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password, role]
              properties:
                name: { type: string }
                email: { type: string, format: email }
                password: { type: string, format: password }
                role: { type: string, enum: [patient, doctor, admin, laborantin] }
      responses:
        "201":
          description: Utilisateur créé
          content:
            application/json:
              schema: { $ref: "#/components/schemas/User" }

  /auth/logout:
    post:
      summary: Déconnexion
      tags: [Auth]
      responses:
        "204": { description: Déconnexion réussie }

  /auth/password/forgot:
    post:
      summary: Demander un reset de mot de passe
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email: { type: string, format: email }
      responses:
        "200": { description: Email de reset envoyé }

  /auth/password/reset:
    post:
      summary: Réinitialiser le mot de passe
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [token, email, password]
              properties:
                token: { type: string }
                email: { type: string }
                password: { type: string, format: password }
      responses:
        "200": { description: Mot de passe réinitialisé }

  /patients:
    get:
      summary: Liste des patients
      tags: [Patients]
      responses:
        "200":
          description: Liste paginée
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/Patient" }
    post:
      summary: Créer un patient
      tags: [Patients]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password, national_id]
              properties:
                name: { type: string }
                email: { type: string }
                password: { type: string }
                national_id: { type: string }
      responses:
        "201":
          description: Patient créé
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Patient" }

  /patients/{id}:
    get:
      summary: Détails d’un patient
      tags: [Patients]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: Patient trouvé
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Patient" }
        "404": { description: Introuvable }

    put:
      summary: Mise à jour patient
      tags: [Patients]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                address: { type: string }
                phone: { type: string }
      responses:
        "200": { description: Patient mis à jour }

    delete:
      summary: Supprimer patient
      tags: [Patients]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        "204": { description: Supprimé }

  /doctors:
    get:
      summary: Liste des médecins
      tags: [Doctors]
      responses:
        "200":
          description: Liste des médecins
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/User" }

  /doctors/{doctor}/assign-patient/{patient}:
    post:
      summary: Assigner un patient à un médecin
      tags: [Doctors]
      parameters:
        - name: doctor
          in: path
          required: true
          schema: { type: integer }
        - name: patient
          in: path
          required: true
          schema: { type: integer }
      responses:
        "200": { description: Patient assigné }

  /consultations:
    post:
      summary: Créer une consultation
      tags: [Consultations]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [patient_id, reason, diagnosis]
              properties:
                patient_id: { type: integer }
                reason: { type: string }
                diagnosis: { type: string }
      responses:
        "201":
          description: Consultation créée
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Consultation" }

  /consultations/{id}:
    get:
      summary: Détails d’une consultation
      tags: [Consultations]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: Consultation trouvée
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Consultation" }

  /consultations/{id}/prescriptions:
    post:
      summary: Ajouter une prescription
      tags: [Prescriptions]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [medicine, dosage, duration]
              properties:
                medicine: { type: string }
                dosage: { type: string }
                duration: { type: string }
                notes: { type: string }
      responses:
        "201":
          description: Prescription créée
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Prescription" }

  /patients/{id}/records:
    get:
      summary: Liste des medical records
      tags: [Medical Records]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: Liste des dossiers
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/MedicalRecord" }

    post:
      summary: Ajouter un medical record
      tags: [Medical Records]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [type, description]
              properties:
                type: { type: string }
                description: { type: string }
      responses:
        "201":
          description: Record créé
          content:
            application/json:
              schema: { $ref: "#/components/schemas/MedicalRecord" }

  /patients/{id}/lab-results:
    get:
      summary: Liste des résultats de labo
      tags: [Lab Results]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: Liste des résultats
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/LabResult" }

    post:
      summary: Upload d’un résultat de labo
      tags: [Lab Results]
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [test_name, result, performed_by]
              properties:
                test_name: { type: string }
                result: { type: string }
                performed_by: { type: string }
      responses:
        "201":
          description: LabResult créé
          content:
            application/json:
              schema: { $ref: "#/components/schemas/LabResult" }

  /logs:
    get:
      summary: Liste des logs (admin uniquement)
      tags: [Audit Logs]
      parameters:
        - name: action
          in: query
          schema: { type: string }
        - name: from
          in: query
          schema: { type: string, format: date }
        - name: to
          in: query
          schema: { type: string, format: date }
      responses:
        "200":
          description: Liste paginée des logs
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items: { $ref: "#/components/schemas/AuditLog" }

  /sync:
    post:
      summary: Synchronisation offline
      tags: [Sync]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                batch:
                  type: array
                  items:
                    type: object
                    properties:
                      type: { type: string }
                      client_uuid: { type: string }
                      client_ts: { type: string, format: date-time }
                      payload: { type: object }
      responses:
        "200":
          description: Résultats de la synchronisation
          content:
            application/json:
              schema:
                type: object
                properties:
                  accepted:
                    type: array
                    items: { type: object }
                  conflicts:
                    type: array
                    items: { type: object }
